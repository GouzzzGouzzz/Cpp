#include <iostream>
#include <vector>


// Function to perform binary search and find the correct position to insert the element in the sorted array
int binarySearch(const vector<int>& sortedArray, int target, int low, int high) {
    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (sortedArray[mid] == target)
            return mid;
        else if (sortedArray[mid] < target)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return low;
}

// Function to merge and insert elements
void mergeInsertionSort(vector<int>& arr) {
    if (arr.size() <= 1)
        return;

    // Step 1: Group elements into pairs and find the larger element in each pair
    vector<int> sortedArray;
    for (int i = 0; i < arr.size() - 1; i += 2) {
        if (arr[i] > arr[i + 1])
            sortedArray.push_back(arr[i]);
        else
            sortedArray.push_back(arr[i + 1]);
    }

    // Step 2: Recursively sort the larger elements
    mergeInsertionSort(sortedArray);

    // Step 3: Insert at the start of S the element paired with the first and smallest element of S
    sortedArray.insert(sortedArray.begin(), arr[0]);

    // Step 4: Insert the remaining elements of X\ S into S using binary search for each insertion
    for (int i = 1; i < arr.size(); ++i) {
        int insertionIndex = binarySearch(sortedArray, arr[i], 0, sortedArray.size() - 1);
        sortedArray.insert(sortedArray.begin() + insertionIndex, arr[i]);
    }

    // Copy the sortedArray back to the original array
    arr = sortedArray;
}

int main() {
    vector<int> arr = {5, 2, 8, 3, 1, 9, 4, 7, 6};

    cout << "Original array: ";
    for (int num : arr) {
        cout << num << " ";
    }

    mergeInsertionSort(arr);

    cout << "\nSorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }

    return 0;
}

